AWSTemplateFormatVersion: 2010-09-09

Description: |
  The base networking components for our stack:
  - VPC
    - set DNS hostnames for EC2 instances
    - only IPv4, IPv6 - disabled
  - InternetGateway
  - Route Table
    - route to the IGW
    - route to local
  - 6 Subnets explicitly assocciated to Route Table
    - 3 Public Subnets numbered 1 - 3
    - 3 Private Subnets numbered 1 - 3

Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: 10.0.0.0/16
  SubnetCidrBlocks:
    Description: "Comma delimited list of CIDR blocks for our priv pub subnets"
    Type: CommaDelimitedList
    Default: > 
      10.0.0.0/22,
      10.0.4.0/22,
      10.0.8.0/22,
      10.0.12.0/22,
      10.0.16.0/22,
      10.0.20.0/22
  Az1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1a
  Az2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1b
  Az3:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1c

# VPC
Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}VPC"

# IGW
  CruddurIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}IGW"

  VPCIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref CruddurIGW

# Route Tables
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}RT"
# Routes

  RouteToIGW:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAttach
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CruddurIGW

# Subnets 3 (3 AZs)
  SubnetPub1:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [0, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPub1"

  SubnetPub2:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [1, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPub2"

  SubnetPub3:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [2, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az3
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPub3"

  SubnetPriv1:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [3, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az1
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPriv1"

  SubnetPriv2:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [4, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az2
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPriv2"

  SubnetPriv3:
    Type: AWS::EC2::Subnet
    Properties:
      EnableDns64: false
      CidrBlock: !Select [5, !Ref SubnetCidrBlocks]
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Az3
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}SubnetPriv3"

  SubnetPub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPub1

  SubnetPub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPub2

  SubnetPub3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPub3

  SubnetPriv1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetPriv1

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}VpcId"
  VpcCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}VpcCidrBlock"
  SubnetCidrBlocks:
    Value: !Join [",", !Ref SubnetCidrBlocks]
    Export:
      Name: !Sub "${AWS::StackName}SubnetCidrBlocks"
  PublicSubnetIds:
    Value: !Join
      - ","
      - - !Ref SubnetPub1
        - !Ref SubnetPub2
        - !Ref SubnetPub3
    Export:
      Name: !Sub "${AWS::StackName}PubliccSubnetIds"
  PrivateSubnetIds:
    Value: !Join
      - ","
      - - !Ref SubnetPriv1
        - !Ref SubnetPriv2
        - !Ref SubnetPriv3
    Export:
      Name: !Sub "${AWS::StackName}PrivateSubnetIds"
  AvailabilityZones:
    Value: !Join
      - ","
      - - !Ref Az1
        - !Ref Az2
        - !Ref Az3
    Export:
      Name: !Sub "${AWS::StackName}AvailabilityZones"
  