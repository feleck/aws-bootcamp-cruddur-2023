AWSTemplateFormatVersion: 2010-09-09

Description: |
  Task Definiton
  Fargate Service
  Execution Role
  Task Role

Parameters:
  NetworkingStack:
    Type: String
    Description: Base layer of networking components eg. VPC, Subnets
    Default: CrdNet
  ClusterStack:
    Type: String
    Description: Cluster layer eg. ECS Cluster, ALB
    Default: CrdCluster
  ContainerPort:
    Type: Number
    Default: 4567
  ServiceCpu:
    Type: String
    Default: 256
  ServiceMemory:
    Type: String
    Default: 512
  ServiceName:
    Type: String
    Default: backend-flask
  ContainerName:
    Type: String
    Default: backend-flask
  TaskFamily:
    Type: String
    Default: backend-flask
  EcrImage:
    Type: String
    Default: 444....dkr.ecr.eu-west-1.amazon
  EnvOtelServiceName:
    Type: String
    Default: backend-flask
  EnvOtelExporterOtlpEndpoint:
    Type: String
    Default: https://api.honeycomb.io
  EnvAWSCognitoUserPoolId:
    Type: String
    Default: 
  EnvAWSCognitoUserPoolClientId:
    Type: String
    Default: 
  EnvFrontendUrl:
    Type: String
    Default: *
  EnvBackendUrl:
    Type: String
    Default: *
  SecretsAWSAccessKeyId:
    Type: String
    Default: *
  SecretsAWSSecretAccessKey:
    Type: String
    Default: *
  SecretsConnectionUrl:
    Type: String
    Default: *
  SecretsRollbarAccessToken:
    Type: String
    Default: *
  SecretsOtelExporterOtlpHeaders:
    Type: String
    Default: *

Resources:
  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Facing SG For out Fargate Service
      GroupName: !Sub "${AWS::StackName}ServiceSG"
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub ${ClusterStack}ALBSEcurityGroupId
          CidrIp: 0.0.0.0/0
          Description: ALB HTTP

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:

      DeploymentConfiguration:

      DeploymentController:
      DesiredCount:
      EnableEcsManagedTags: true
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds:
      Launchtype: FARGATE
      LoadBalancers:
        - TargetGroupArn: 'arn:aws:elasticloadbalancing:eu-west-1:'
          ContainerName: backend-flask
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ServiceSG.GroupId
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  !Sub "${NetworkingStack}PublicSubnetIds"
      PlatformVersion: LATEST
      PropagateTags: SERVICE
      ServiceConnectConfiguration:
      ServiceName: !Ref ServiceName
      ServiceRegistries:
        - RegistryArn: !Sub aws:arn:servicediscovery:${AWS::REGION}:${AWS::AccountId}:service/srv-cruddur-backend-flask
          Port: 4567
          ContainerName: backend-flask
          ContainerPort: !Ref ContainerPort
      TaskDefinition: !Ref TaskFamily

  TaskDefiniton:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskFamily
      ExecutionRoleArn: arn:aws:iam:....
      TaskRoleArn: awn:aws:iam:....
      NetworkMode: awsvpc
      Cpu: !Ref ServiceCpu
      Memory: !Ref ServiceMemory
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -  Name: xray
          Image: public.ecr.aws/xray/aws-xray...
          Essential: true
          User: 1337
          PortMappings:
            - Name: xray
              ContainerPort: 2000
              Protocol: udp
        - Name: backend-flask
          Image: !Ref EcrImage
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - python /backend-flask/bin/health-check
            Interval: 30
            Timeout: 5
            StartPeriod: 60
          PortMappings:
            - Name: !Ref ContainerName
              ContainerPort: !Ref ContainerPort
              Protocol: tcp
              AppProtocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: cruddur
              awslogs-region: ${AWS::REGION}
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: OTEL_SERVICE_NAME
              Value: !Ref ServiceName
            - Name: OTEL_EXPORTER_OTLP_ENDPOINT
              Value: !Ref EnvOtelExporterOtlpEndpoint
            - Name: AWS_COGNITO_USER_POOL_ID
              Value: !Ref EnvAWSCognitoUserPoolId
            - Name: AWS_COGNITO_USER_POOL_CLIENT_ID
              Value: !Ref EnvAWSCognitoUserPoolClientId
            - Name: FRONTEND_URL
              Value: !Ref EnvFrontendUrl
            - Name: BACKEND_URL
              Value: !Ref EnvBackendUrl
            - Name: AWS_DEFAULT_REGION
              Value: ${AWS::REGION}
          Secrets:
            - Name: AWS_ACCESS_KEY_ID
              ValueFrom: !Ref SecretsAWSAccessKeyId
            - Name: AWS_SECRET_ACCESS_KEY
              ValueFrom: !Ref SecretsAWSSecretAccessKey
            - Name: CONNECTION_URL
              ValueFrom: !Ref SecretsConnectionUrl
            - Name: ROLLBAR_ACCESS_TOKEN
              ValueFrom: !Ref SecretsRollbarAccessToken
            - Name: OTEL_EXPORTER_OTLP_HEADERS
              ValueFrom: !Ref SecretsOtelExporterOtlpHeaders


  ExecutionRole:
  TaskRole:

38:40